name: CI

on:
  watch:
    types: [started]

env:
  bds_version: 1.14.60.5
  vcpkgResponseFile: '${{ github.workspace }}/vcpkgResponseFile.txt'
  VCPKG_UPLOAD_DOWNLOADED: false
  VCPKG_UPLOAD_INSTALLED: false
  PRE_BUILD_DEBUG: false
  POST_BUILD_DEBUG: false


jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Restore from cache and run vcpkg
      uses: lukka/run-vcpkg@v3
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgArguments: '@${{ env.vcpkgResponseFile }}'
        vcpkgTriplet: x64-windows
        cleanAfterBuild: false
        appendedCacheKey: ${{ hashFiles(env.vcpkgResponseFile) }}

    - uses: ilammy/msvc-dev-cmd@v1.3.0
      with:
        arch: x64
    
    - name: Install llvm 10.0
      run: |
        Write-Host ('Downloading LLVM')
        Invoke-WebRequest -Uri "https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/LLVM-10.0.0-win64.exe" -OutFile "C:\LLVM.exe"
        Write-Host ('Installing LLVM')
        Start-Process C:\LLVM.exe -Wait -ArgumentList @('/S', '/D=C:\LLVM')
        Write-Host ('Installed LLVM')
        echo "::set-env name=CC::clang-cl"
        echo "::set-env name=CXX::clang-cl"
        echo "::set-env name=PATH::C:/LLVM/bin;$env:PATH"

    - name: Build BedrockPy
      uses: lukka/run-cmake@v2.5
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeGenerator: VS16Win64
        buildDirectory: ${{ github.workspace }}/Build
        cmakeAppendedArgs: -DCMAKE_BUILD_TYPE=RelWithDebInfo "-DCMAKE_C_COMPILER=C:/LLVM/bin/clang-cl.exe" "-DCMAKE_CXX_COMPILER=C:/LLVM/bin/clang-cl.exe" -DCMAKE_C_FLAGS=-m64 -DCMAKE_CXX_FLAGS=-m64 -G "CodeBlocks - NMake Makefiles" ${{ github.workspace }}
        buildWithCMake: true
        buildWithCMakeArgs: --build ${{ github.workspace }}\Build --target install
    
    - name: Packaging
      run: |
        cd ${{ github.workspace }}\Build
        "/c/Program Files/CMake/bin/cpack" -G TZST .
        "/c/Program Files/CMake/bin/cpack" -G STGZ .
        "/c/Program Files/CMake/bin/cpack" -G ZIP .
        "/c/Program Files/CMake/bin/cpack" -G 7Z .
        echo "::set-env name=BUILD_TIME::$(date +"%Y%m%d%H%M")"
      shell: bash

    - name: Create a new GitHub release if a new tag is pushed
      uses: softprops/action-gh-release@v1
      with:
        name: v${{ env.GITHUB_TAG_NAME }}
        prerelease: false
        draft: true
        files: |
          Pack/BedrockPy-*
        body: (empty)
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Upload dist directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: BedrockPy_${{ env.bds_version }}_${{ env.BUILD_TIME }}
        path: 'Dist'

    - name: Upload vcpkg installed
      uses: actions/upload-artifact@v1.0.0
      if: env.VCPKG_UPLOAD_INSTALLED == 'true' && !cancelled()
      with:
        name: vcpkg-installed
        path: vcpkg/installed/${{ env.RUNVCPKG_VCPKG_TRIPLET_OUT }}

    - name: Upload vcpkg downloaded
      uses: actions/upload-artifact@v1.0.0
      if: env.VCPKG_UPLOAD_DOWNLOADED == 'true' && !cancelled()
      with:
        name: vcpkg-downloaded
        path: vcpkg/downloads
